-	Implemented commands
o	mkfs 
	Make file system formats the system and readies the shell to store information and take commands. No other commands may be taken before this command has completed. It takes no parameters
o	cd 
	Change directory changes the current directory. The user is able to move one directory at a time up or down. If the target directory does not exist or if no parameters are given while in the root directory, an error is returned. It is able to take one or zero parameters.
o	ls 
	List displays a list of all the files and directories in the current directory. Directories are encased in brackets. It takes no parameters
o	rmdir 
	Remove directory deletes a directory within the current directory. If the target directory does not exist or is not empty the shell returns an error. It takes one parameter.
o	rmfl
	Remove file deletes a file within the current directory. If the target file does not exist the shell returns an error. It takes one parameter.
o	mkfl
	Make file creates a file of a given name in the current directory. If no name is given or a file by the same name exists in the current directory, an error is returned. When the file is created, the time it is created is printed out and stored. It takes one parameter.
o	mkdir
	Make directory creates a directory of a given name in the current directory. If no name is given, a directory of the same name exists with then current directory, or the current directory shares the name given by the parameter, an error is returned. Upon creation, the time created is printed out and stored. It takes one parameter.
o	stat
	Stat prints out the time a directory or file was created. If no parameter is given or the given parameter does not match a file or directory, an error is returned. It takes one parameter
o	exit
	Exit terminates the shell program. It takes no parameters.
-	Structures and algorithms
o	Map
	We implemented a map which accomplished a large amount of the work for this shell system. The main map contained all of the directories while sub maps were assigned to directories that contained files. This allowed us to easily traverse the directories as well as a clean command for clearing the file system.
o	Searching
	Many of our commands required searching the current directory for files and/or directories. Again, we used the map and its iterator function in combination with a ‘for’ loop to look for or list the files/directories.
o	Running the system
	In order to run the system we implemented a ‘do-while’ loop that accepted commands, parsed them, and called the corresponding command method. To read the commands we used a large amount of ‘else if’ statements to find what the user was trying to call. If the user enters an unrecognized command then an error will be returned.
-	Responsibilities
o	Alex Cockrum
	Writing code for cd, rmdir, and part of the directory class. Also provided clean comments for the code.
o	Chris Poole
	Writing code for stat, most of the directory class, and implementing time components to mkfl and mkdir. Also authored the write up.
o	Michael Henning
	Writing code for ls, exit, the makefile, and helped create the searching loops and implementing time components.
o	Thomas Yeomans
	Writing code for mkfs, mkdir, mkfl, rmfl, and the file class.
